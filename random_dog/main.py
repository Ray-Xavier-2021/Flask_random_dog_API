from flask import Flask, render_template, request, session

# Import requests library to handle API requests
import requests

from secret import sk

app = Flask(__name__)

# app.secret_key = os.environ['flask_secret_key']
app.secret_key = sk['secret_key']

# app.config['SESSION_COOKIE_SAMESITE'] = 'None'
# app.config['SESSION_COOKIE_SECURE'] = True

# Fake database to hold data
db = {
  'total_dogs_generated': 0,
  'last_dog': '',
}

# Check if key not found in database, then create key
if 'total_dogs_generated' not in db:
  db['total_dogs_generated'] = 0

if 'last_dog' not in db:
  db['last_dog'] = '' 

if 'users' not in db:
  db['users'] = []

# Users dummy list / database
# users = [
#   {
#     'user_name': 'ray',
#     'logins': 1,
#     'dogs_generated': 5
#   },
#   {
#     'user_name': 'Xavier',
#     'logins': 3,
#     'dogs_generated': 9
#   },
#   {
#     'user_name': 'Mystery',
#     'logins': 3,
#     'dogs_generated': 6,
#   }
# ]



'''
Add methods allowed to home route 
Check Method
Get user input
Give home page access to dog image and total dogs generated
'''
@app.route('/', methods=['POST', 'GET'])
def home():
  # Check if method is 'POST'
  if request.method == 'POST':
    print("You clicked the Login Button!")

    # Save the value of user name input
    user_name = request.form['user_name']

    # Save user name for session
    session['user'] = user_name

    # Call create / update user function and set to user variable
    user = create_or_update_user(user_name)
  # Else user is none
  else:
    user = None

  return render_template('index.html',
  dogs_generated=db['total_dogs_generated'],
  dog_image=db['last_dog'],
  user=user)

'''
Create a get_dog route
Create a request for a random dog image
Convert to json
Save converted data to variable
Let it render to same home page template
Pass the value of rendered dog image to variable/attribute
'''
@app.route('/get_dog')
def get_dog():
  # get request for random dog image
  response = requests.get('https://dog.ceo/api/breeds/image/random')

  # convert response
  data = response.json() 

  # set random url to dog_img
  dog_image = data['message']

  # Set previous dog image on home page
  db['last_dog'] = dog_image

  # Check if there is a user session
  if session['user']:

    # Get user from in session from database
    user = get_user_from_database(session['user'])

    # increment value of dogs generated by 1
    db['total_dogs_generated'] += 1

    # increment value of user dogs generated by 1
    user['dogs_generated'] += 1

  return render_template('index.html',
   dog_image=dog_image,
   dogs_generated=db['total_dogs_generated'],
   user=user)

'''
Create route for logout
'''
@app.route('/logout')
def logout():
  # Reset session user
  session['user'] = None

  # Return indewx template w/ total amount of dogs rendered
  return render_template('index.html',
  dogs_generated=db['total_dogs_generated'])


'''
Check if user already in database
  If user exist pull data from list

  If user NOT in databse
    Create and append user
'''
def create_or_update_user(user_name):
  # Find user
  user = get_user_from_database(user_name)

  # Returns first user in db else returns None
  user = user[0] if user else None

  # Check if user already exist
  if user:
    # print user
    print('USER ALREADY EXIST!')

    # Increment logins
    user['logins'] += 1
    print(user)

  else:
    print('NEW USER!')
    # Append session new user
    db['users'].append({
      'user_name': user_name,
      'logins': 1,
      'dogs_generated': 0
    })

    # Find user again
    user = get_user_from_database(user_name)

  # Return user
  return user
  
'''
Get user from database function
'''
def get_user_from_database(user_name):
  user = [user for user in db['users'] if user['user_name'] == user_name]
  return user[0] if user else None

if __name__ == "__main__":

    # Replit server config
    # app.run(debug=True,host='0.0.0.0', port=81)

    # Local server config
    app.run(debug=True)